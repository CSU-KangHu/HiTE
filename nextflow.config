manifest {
    name            = 'HiTE'
    author          = 'Kang Hu'
    homePage        = 'https://github.com/CSU-KangHu/HiTE'
    description     = 'detecting intact transposable elements based on genome assembly'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

params {
    // from nanome
    conda_base_dir             = null  // sample: /opt/conda
    conda_name                 = null  // sample: /opt/conda/envs/HiTE
    conda_cache = 'local_conda_cache'

    docker_name                = "kanghu/hite:3.2.0"
    singularity_name           = "docker://kanghu/hite:3.2.0"
    singularity_cache          = 'local_singularity_cache'

    // Specify your pipeline's command line flags
    // Input options
    help            = false
    genome          = null
    outdir          = null

    fixed_extend_base_threshold = 1000
    chunk_size = 400
    tandem_region_cutoff = 0.5
    max_repeat_len = 30000
    chrom_seg_length = 1000000
    flanking_len = 50
    plant = 1
    recover = 0
    classified = 1
    domain = 0
    annotate = 0
    remove_nested = 1
    debug = 0
    is_denovo_nonltr = 1
    miu = '1.3e-8'
    use_NeuralTE = 1
    is_wicker = 0
    classify_chunk_size = 500
    search_struct = 1
    intact_anno = 0
    curated_lib = null
    // ===================================================================================

    skip_HiTE = 0
    BM_RM2 = 0
    BM_EDTA = 0
    BM_HiTE = 0
    species = 'test'
    EDTA_home = ''

    // ===================================================================================

    dependencies = ["LTR_retriever", "RepeatMasker", "rmblastn", "RepeatModeler"]
    dep_satisfied = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '200.GB'
    max_cpus                   = 40
    max_time                   = '360.h'

    tracedir                   = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'nextflow_base.config'



profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        //params.enable_conda    = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        process.conda = params.conda_name
        conda.cacheDir = params.conda_cache
    }
    docker {
        params {
            containerOptions = null
        }
        process.container      = params.docker_name
        process.containerOptions = params.containerOptions
        docker.envWhitelist = ''
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        params {
            containerOptions = ""
        }
        process {
            container = params.singularity_name
            containerOptions = params.containerOptions
        }
        singularity.cacheDir = params.singularity_cache
        singularity.envWhitelist = ''
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
     // hpc with singularity-loading, refer from nanome
    hpc { // general hpc configuration
		params {
			// hpc slurm default parameters
			qos = 'resq'
			partition = 'resQ'
			queue = partition
			processors = 40
			memory = '200.GB'
			time = '50.h'
			gresOptions = null  // 'gpu:1'
			account = 'pi_zy'

			//qos_gpu = "gpuq"
			//partition_gpu = 'gpu2Q'
			//queue_gpu = partition_gpu
			//gresOptions_gpu = 'gpu:1'

			// Defaults max resource
			max_memory                 = 200.GB
			max_cpus                   = 40
			max_time                   = 360.h

			queueSize = 5	// max number of job submit
		}
		process {
			executor = 'slurm'

			queue = params.queue
			qos = params.qos
			cpus = params.processors
			memory = params.memory
			time = params.time
			clusterOptions = "-A ${params.account} -q ${params.qos} -p ${params.partition} ${params.gresOptions ? '--gres=' + params.gresOptions : ' '}"

			// beforeScript = 'module load singularity'  // this is for combining singularity with hpc
		}
		executor {
			queueSize = params.queueSize
			submitRateLimit = '5/1min'
			exitReadTimeout = '500 sec'
			pollInterval = '60 sec'
		}
	}
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'HiTE'
    author          = 'Kang Hu'
    homePage        = 'https://github.com/CSU-KangHu/HiTE'
    description     = 'A progressive method for accurate detection of intact Transposable Elements'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}