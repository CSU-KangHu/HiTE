manifest {
    name            = 'HiTE'
    author          = 'Kang Hu'
    homePage        = 'https://github.com/CSU-KangHu/HiTE'
    description     = 'detecting intact transposable elements based on genome assembly'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

params {
    help            = false
    genome          = null
    outdir          = null

    thread         = 48
    fixed_extend_base_threshold = 1000
    chunk_size = 400
    tandem_region_cutoff = 0.5
    max_repeat_len = 30000
    chrom_seg_length = 500000
    flanking_len = 50
    plant = 1
    remove_nested = 1
    global_flanking_filter = 1
    classified = 1
    recover = 0
    debug = 0
    // ===================================================================================

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '200.GB'
    max_cpus                   = 40
    max_time                   = '360.h'
}

// Load base.config by default for all pipelines
includeConfig 'nextflow_base.config'



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}